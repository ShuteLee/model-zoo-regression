//===-*- Groovy -*-===

def sync_repository_github(name, branch) {
    def url = "https://github.com/sophgo/${name}.git"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url)
}

def sync_repository_gerrit(name, branch) {
    def url = "https://${GERRIT_AC_USR}:${GERRIT_AC_PSW}@gerrit-ai.sophgo.vip:8443/a/${name}"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url, branch)
}

def sync_repostory(name, url, branch) {
    sh """#!/bin/bash
        set -e
        if [ -d "${name}" ]; then
            pushd ${name}
            git fetch && git reset --hard origin/${branch} && git submodule update
            popd
        else
            git clone ${url}
        fi
    """
}

def parse_profile(path) {
    println("path: ${path}")
}

def get_first_avaliable_chips(target) {
    def target_chip_map = ['BM1684': '0x1684', 'BM1684X':'0x1684x']
    def card_num = sh(script: 'cat /proc/bmsophon/card_num', returnStdout: true).toInteger()
    println("card_num: ${card_num}")
    for (int i=0; i<card_num; i++) {
        def chipid = sh(script: "cat /proc/bmsophon/card${i}/chipid", returnStdout: true).trim()
        println("chipid: ${chipid}, target_chip_id: ${target_chip_map[target]}")
        if (target_chip_map[target] == chipid) {
            def avaliable_idxs = sh(script: "ls /proc/bmsophon/card${i} | grep \"^bmsophon[0-9]*\$\" | sed 's/bmsophon\\([0-9]*\\)/\\1/'", returnStdout: true).trim().split('\n')
            println("avaliable_idxs: ${avaliable_idxs}")
            for (def avaliable_idx : avaliable_idxs) {
                def chip_status = sh(script: "cat /proc/bmsophon/card${i}/bmsophon${avaliable_idx}/status", returnStdout: true).trim()
                println("avaliable_idx: ${avaliable_idx}, status: ${chip_status}")
                if (chip_status == "Active") {
                    return avaliable_idx;
                }
            }
        }
    }
    return -1;
}

pipeline {
    parameters {
        string(name: 'CASE_NAME', defaultValue: '', description: 'Case name of a single case.')
        string(name: 'TARGET', defaultValue: '', description: 'BM1684/BM1684X')
        string(name: 'UUID', defaultValue: '', description: 'UUID')
    }
    agent {
        label 'linux-sc5-sc7'
    }
    environment {
        DEVICES = -1
        DATA_SERVER = "http://172.28.9.198/webdav/dataset"
        FTP_SERVER = "ftp://AI:SophgoRelease2022@172.28.141.89"
        SWAP_SERVER = "http://172.28.142.120/webdav/swap"
        OUTPUT_TMP = "/tmp/dummy.github.output.txt"
    }
    stages {
        stage('Information') {
            steps {
                println("RUNTIME: case name: ${params.CASE_NAME}, target selected: ${params.TARGET}")
                sh """#!/bin/bash
                    set -e
                    apt-get update
                    apt-get install git -y
                    apt-get install git-lfs -y
                    apt-get install tree -y
                    git config --unset core.hooksPath
                    git lfs install --force
                    pip3 install pytest
                    pip3 install pandas
                    pip3 install docker
                    pip3 install pytest
                    pip3 install "urllib3<2"
                """
            }
        }
        stage('CodeSync') {
            steps {
                dir("$WORKSPACE") {
                    sync_repository_github("model-zoo", "main")
                    sync_repostory("blame-regression", "https://github.com/QinyuZHAO0/blame-regression.git", "master")
                }
            }
        }
        stage('Process') {
            steps {
                dir("${WORKSPACE}/blame-regression") {
                    script {
                        println("runtime start.....")
                        println("case_name: ${params.CASE_NAME}, TARGET: ${params.TARGET}")
                        def device_id = get_first_avaliable_chips(params.TARGET)
                        println("device id selected: ${device_id}")
                        withEnv(["DEVICES=${device_id}"]) {
                            def runtime_status = -1
                            try {
                                sh """#!/bin/bash
                                    set -e
                                    python3 -m pytest test -m "mlir and runtime" --target ${params.TARGET} --case_name ${params.CASE_NAME} --bmodel_tar ${params.UUID}
                                """
                                dir("${WORKSPACE}/model-zoo") {
                                    def l2tree = sh(script: "tree -L 3", returnStdout: true).trim()
                                    println("L2 working tree: ${l2tree}")
                                }
                                runtime_status = 0;
                                // parse_profile("$WORKSPACE")
                                println("runtime sucess")
                            } catch (err) {
                                println("runtime error")
                            } finally {
                                println("runtime status: ${runtime_status}")
                                if (runtime_status == -1) {
                                    throw new Exception("RUNTIME FAILURE")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}