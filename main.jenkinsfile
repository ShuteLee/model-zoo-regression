//===-*- Groovy -*-===

def sync_repository_github(name) {
    def url = "https://github.com/sophgo/${name}.git"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url)
}

def sync_repository_gerrit(name) {
    def url = "https://${GERRIT_AC_USR}:${GERRIT_AC_PSW}@gerrit-ai.sophgo.vip:8443/a/${name}"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url)
}

def sync_repostory(name, url) {
    if (!fileExists("${GIT_REPOSTORY_PATH}")) {
        println("repostory path ${GIT_REPOSTORY_PATH} does not exist, creating...")
        sh "mkdir -p ${GIT_REPOSTORY_PATH}"
    }
    def path = "${GIT_REPOSTORY_PATH}/" + name
    if (fileExists(path)) {
        sh """#!/bin/bash
            set -e
            pushd ${path}
            git pull && git submodule update
            popd
        """
    } else {
        sh """#!/bin/bash
            set -e
            pushd ${GIT_REPOSTORY_PATH}
            git clone ${url}
            popd
        """
    }
}

pipeline {
    parameters {
        string(name: 'CASE_NAME', defaultValue: '', description: 'Models should be rechecked under this version.')
        string(name: 'TOOLCHAIN', defaultValue: '', description: 'NNTC/TPU-MLIR')
        string(name: 'TARGET', defaultValue: '', description: 'BM1684/BM1684X')
        string(name: 'COMMIT_SHA', defaultValue: '', description: 'Build the specific version of TPU-MLIR/NNTC .')
    }
    agent any
    environment {
        GIT_REPOSTORY_PATH = "/var/jenkins_home/git-repository"
        GERRIT_AC = credentials('gerrit-ac')
    }
    stages {
        stage('Information') {
            steps {
                println("case name: ${params.CASE_NAME}, toolchain selected: ${params.TOOLCHAIN}, target selected: ${params.TARGET}, toolchain version: ${params.COMMIT_SHA}")
            }
        }
        stage('CodeSync') {
            steps {
                dir("$WORKSPACE") {
                    sync_repository_github("model-zoo")
                    script {
                        if (params.TOOLCHAIN == "NNTC") {
                            sync_repository_gerrit("libsophon")
                            sync_repository_gerrit("bm_prebuilt_toolchains")
                            sync_repository_gerrit("nntoolchain")
                            sh """#!/bin/bash
                                set -e
                                ln -s ${GIT_REPOSTORY_PATH}/libsophon ${WORKSPACE}/libsophon
                                ln -s ${GIT_REPOSTORY_PATH}/bm_prebuilt_toolchains ${WORKSPACE}/bm_prebuilt_toolchains
                                cp -v ${GIT_REPOSTORY_PATH}/nntoolchain ${WORKSPACE}/nntoolchain
                            """
                        } else if (params.TOOLCHAIN == "TPU-MLIR") {
                            sync_repository_gerrit("tpu-mlir")
                            sh """#!/bin/bash
                                set -e
                                cp -rv ${GIT_REPOSTORY_PATH}/tpu-mlir ${WORKSPACE}/tpu-mlir
                            """
                        }
                    }
                }
            }
        }
        stage('CaseSplit') {
            steps {
                dir("$WORKSPACE") {
                    script {
                        for (def case_name : params.CASE_NAME.split()) {
                            println(case_name)
                            def b = build job: 'blame', parameters: [
                                    string(name: 'CASE_NAME', value: case_name),
                                    string(name: 'TOOLCHAIN', value: params.TOOLCHAIN),
                                    string(name: 'TARGET', value: params.TARGET),
                                    string(name: 'COMMIT_SHA', value: params.COMMIT_SHA),
                                    ], wait: true, propagate: false
                            def varb = b.getResult()
                            println(varb)
                        }
                    }
                }
            }
        }
    }
}
