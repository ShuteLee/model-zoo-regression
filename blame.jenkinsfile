//===-*- Groovy -*-===

def sync_repository_github(name) {
    def url = "https://github.com/sophgo/${name}.git"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url)
}

def sync_repository_gerrit(name) {
    def url = "https://${GERRIT_AC_USR}:${GERRIT_AC_PSW}@gerrit-ai.sophgo.vip:8443/a/${name}"
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    sync_repostory(name, url)
}

def sync_repostory(name, url) {
    def rep_path = "${GIT_REPOSTORY_PATH}/" + name
    sh """#!/bin/bash
        set -e
        mkdir -p "${GIT_REPOSTORY_PATH}"
        if [ -d "${rep_path}" ]; then
            pushd ${rep_path}
            git pull && git submodule update
            popd
        else
            pushd ${GIT_REPOSTORY_PATH}
            git clone ${url}
            popd
        fi
    """
}

pipeline {
    parameters {
        string(name: 'CASE_NAME', defaultValue: '', description: 'Case name of a single case.')
        string(name: 'TOOLCHAIN', defaultValue: '', description: 'NNTC/TPU-MLIR')
        string(name: 'TARGET', defaultValue: '', description: 'BM1684/BM1684X')
        string(name: 'COMMIT_SHA', defaultValue: '', description: 'Build the specific version of TPU-MLIR .')
    }
    agent {
        docker {
            image 'sophgo/tpuc_dev'
            args "-v /home/jenkins/git-repository:/git-repository"
            label 'linux'
        }
    }
    environment {
        GIT_REPOSTORY_PATH = "/git-repository"
        GERRIT_AC = credentials('gerrit-ac')
        GIT_SSL_NO_VERIFY = 1
        DATA_SERVER = "http://172.28.9.198/webdav/dataset"
        FTP_SERVER = "ftp://AI:SophgoRelease2022@172.28.141.89"
        SWAP_SERVER = "http://172.28.142.120/webdav/swap"
        OUTPUT_TMP = "/tmp/dummy.github.output.txt"
    }
    stages {
        stage('Information') {
            steps {
                println("case name: ${params.CASE_NAME}, toolchain selected: ${params.TOOLCHAIN}, target selected: ${params.TARGET}, toolchain version: ${params.COMMIT_SHA}")
            }
        }
        stage('CodeSync') {
            steps {
                dir("$WORKSPACE") {
                    sh """#!/bin/bash
                        set -e
                        rm -rf *
                    """
                    sync_repository_github("model-zoo")
                    script {
                        if (params.TOOLCHAIN == "nntoolchain") {
                            sync_repository_gerrit("libsophon")
                            sync_repository_gerrit("bm_prebuilt_toolchains")
                            sync_repository_gerrit("nntoolchain")
                            sh """#!/bin/bash
                                set -e
                                ln -s ${GIT_REPOSTORY_PATH}/libsophon ${WORKSPACE}/libsophon
                                ln -s ${GIT_REPOSTORY_PATH}/bm_prebuilt_toolchains ${WORKSPACE}/bm_prebuilt_toolchains
                                git clone ${GIT_REPOSTORY_PATH}/nntoolchain ${WORKSPACE}
                            """
                        } else if (params.TOOLCHAIN == "tpu-mlir") {
                            sync_repository_gerrit("tpu-mlir")
                            sh """#!/bin/bash
                                set -e
                                git clone ${GIT_REPOSTORY_PATH}/tpu-mlir ${WORKSPACE}
                            """
                        }
                        sh """#!/bin/bash
                            set -e
                            git clone ${GIT_REPOSTORY_PATH}/model-zoo ${WORKSPACE}
                            git clone https://github.com/QinyuZHAO0/blame-regression.git
                        """
                    }
                }
            }
        }
        stage('Process') {
            steps {
                dir("$WORKSPACE") {
                    script {
                        sh """#!/bin/bash
                            set -e
                            pushd ${params.TOOLCHAIN}
                            git reset --hard ${params.COMMIT_SHA}
                        """
                        def commit_n_sha = sh(script: '''git log  --pretty=oneline -n 5 --pretty=format:\"%h\"''', returnStdout: true)
                        def commit_n = commit_n_sha.split("\n")
                        for (def cmt_id : commit_n) {
                            try {
                                stage("build_${cmt_id}") {
                                    dir ("${WORKSPACE}/blame-regression") {
                                        sh """#!/bin/bash
                                            set -e
                                            python3 -m pytest test -m "mlir and build" --target=${params.TARGET} --commit_id ${cmt_id} --case_name ${params.CASE_NAME}
                                        """
                                    }
                                }
                                def b = build job: 'runtime', parameters: [
                                        string(name: 'CASE_NAME', value: params.CASE_NAME),
                                        string(name: 'TARGET', value: params.TARGET)
                                        ], wait: true, propagate: false
                                def varb = b.getResult()
                                println(varb)
                            } catch (err) {
                                println("catched failer, COMMIT_SHA: ${cmt_id}")
                                println(err)
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}