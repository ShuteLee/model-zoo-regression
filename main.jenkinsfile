//===-*- Groovy -*-===

def generateStage(model) {
    return {
        stage("${model}") {
                dir("$WORKSPACE") {
                    sh """#!/bin/bash
                        set -e
                        cd tpu-mlir/
                        source ./envsetup.sh
                        cd regression
                        ./run_model.sh ${model}
                        """
            }
        }
    }
}

def sync_repository_github(name, url) {
    sync_repostory(name, url)
}

def sync_repository_gerrit(name) {
    def url = "https://${GERRIT_AC_USR}:${GERRIT_AC_PWD}@gerrit-ai.sophgo.vip:8443/a/${name}"
    sync_repostory(name, url)
}

def sync_repostory(name, url) {
    println("sync the latest codes")
    println("repository name: " + name + ", url: " + url)
    if (fileExists("${GIT_REPOSTORY_PATH}")) {
        println("repostory path ${GIT_REPOSTORY_PATH} exists.")
    } else {
        println("repostory path ${GIT_REPOSTORY_PATH} does not exist, creating...")
        sh "mkdir -p ${GIT_REPOSTORY_PATH}"
    }
    def path = "${GIT_REPOSTORY_PATH}/" + name
    if (fileExists(path)) {
        sh """#!/bin/bash
            pushd ${path}
            git pull && git submodule update
            popd
        """
    } else {
        sh """#!/bin/bash
            git config --global http.sslVerify false
            pushd ${GIT_REPOSTORY_PATH}
            git clone ${url}
            popd
        """
    }
}

pipeline {
    parameters {
        string(name: 'CASE_NAME', defaultValue: '', description: 'Models should be rechecked under this version.')
        string(name: 'TOOLCHAIN', defaultValue: '', description: 'NNTC/TPU-MLIR')
        string(name: 'TARGET', defaultValue: '', description: 'BM1684/BM1684X')
        string(name: 'COMMIT_SHA', defaultValue: '', description: 'Build the specific version of TPU-MLIR/NNTC .')
    }
    agent any
    environment {
        GIT_REPOSTORY_PATH = "/var/jenkins_home/git-repository"
        GERRIT_AC = credentials('gerrit-ac')
    }
    stages {
        stage('Information') {
            steps {
                echo "case name: ${params.CASE_NAME}, toolchain selected: ${params.TOOLCHAIN}, target selected: ${params.TARGET}, toolchain version: ${params.COMMIT_SHA}\n"
            }
        }
        stage('Checkout') {
            steps {
                dir("$WORKSPACE") {
                    sync_repostory("model-zoo", "https://github.com/sophgo/model-zoo.git")
                    sync_repostory("tpu-mlir", "")
                }
            }
        }
    }
}
